my_matrix <- makeCacheMatrix()
my_matrix
makeCacheMatrix(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(data = 1:4, nrow = 2, ncol = 2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[getinv()]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[get()]
m <- solve(data, ...)
x[setinv(m)]
m
}
my_matrix <- makeCacheMatrix(matrix(data = 1:4, nrow = 2, ncol = 2))
my_matrix$get
my_matrix <- matrix(data = 1:4, nrow = 2, ncol = 2)
test_matrix <- makeCacheMatrix(my_matrix)
test_matrix$get
test_matrix$get()
cacheSolve(test_matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(test_matrix)
test_matrix$get()
new_matrix <- matrix(data = 4:1, nrow = 2, ncol = 2)
test_matrix$set(new_matrix)
test_matrix$get()
cacheSolve(test_matrix)
test_matrix$getinv
test_matrix$getinv()
cacheSolve(test_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}  ## creates set() function for the matrix object, which allows for (re)setting the value of the matrix
get <- function() x  ## creates get() function for the matrix object, which returns the matrix
setinverse <- function(solve) m <<- solve  ## creates setinverse() function for the matrix object, which creates a
## cached value of the inverse of the matrix object
getinverse <- function() m  ## creates setinverse() function for the matrix object, which returns the
## cached value of the inverse of the matrix object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function caches the value of a passed matrix-like object (created using makeCacheMatrix), and returns it.
## In future calls, it announces that it's saving the cached value of the inverse, rather than recalculating it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()  ## sets the value of "m" to the cached inverse of the matrix-like object passed
if(!is.null(m)) {  ## if that inverse value has not already been cached, this results in "m" being null
message("getting cached data")  # if m is not null, then it announces that it's returning the cached version
return(m)  ## and then returns it
}
data <- x$get()  ## if "m" is null, then it uses the get() function to create a copy of the matrix in the function environment
m <- solve(data, ...) ## then it uses the solve() function to get the inverse of the matrix, and sets "m" to that value
x$setinverse(m) ## then uses setinverse() to cache that calculated inverse for later use
m ## and finally, returns the newly calculated inverse
}
cacheSolve(test_matrix)
test_matrix$getinv()
cacheSolve(test_matrix)
test_matrix
test_matrix$get()
cacheSolve(test_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(test_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}  ## creates set() function for the matrix object, which allows for (re)setting the value of the matrix
get <- function() x  ## creates get() function for the matrix object, which returns the matrix
setinverse <- function(solve) m <<- solve  ## creates setinverse() function for the matrix object, which creates a
## cached value of the inverse of the matrix object
getinverse <- function() m  ## creates setinverse() function for the matrix object, which returns the
## cached value of the inverse of the matrix object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function caches the value of a passed matrix-like object (created using makeCacheMatrix), and returns it.
## In future calls, it announces that it's saving the cached value of the inverse, rather than recalculating it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()  ## sets the value of "m" to the cached inverse of the matrix-like object passed
if(!is.null(m)) {  ## if that inverse value has not already been cached, this results in "m" being null
message("getting cached data")  # if m is not null, then it announces that it's returning the cached version
return(m)  ## and then returns it
}
data <- x$get()  ## if "m" is null, then it uses the get() function to create a copy of the matrix in the function environment
m <- solve(data, ...) ## then it uses the solve() function to get the inverse of the matrix, and sets "m" to that value
x$setinverse(m) ## then uses setinverse() to cache that calculated inverse for later use
m ## and finally, returns the newly calculated inverse
}
cacheSolve(test_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}  ## creates set() function for the matrix object, which allows for (re)setting the value of the matrix
get <- function() x  ## creates get() function for the matrix object, which returns the matrix
setinverse <- function(solve) m <<- solve  ## creates setinverse() function for the matrix object, which creates a cached value of the inverse of the matrix object
getinverse <- function() m  ## creates setinverse() function for the matrix object, which returns the cached value of the inverse of the matrix object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function caches the value of a passed matrix-like object (created using makeCacheMatrix), and returns it.
## In future calls, it announces that it's saving the cached value of the inverse, rather than recalculating it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()  ## sets the value of "m" to the cached inverse of the matrix-like object passed
if(!is.null(m)) {  ## if that inverse value has not already been cached, this results in "m" being null
message("getting cached data")  # if m is not null, then it announces that it's returning the cached version
return(m)  ## and then returns it
}
data <- x$get()  ## if "m" is null, then it uses the get() function to create a copy of the matrix in the function environment
m <- solve(data, ...) ## then it uses the solve() function to get the inverse of the matrix, and sets "m" to that value
x$setinverse(m) ## then uses setinverse() to cache that calculated inverse for later use
m ## and finally, returns the newly calculated inverse
}
cacheSolve(test_matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()  ## sets the value of "m" to the cached inverse of the matrix-like object passed
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()  ## if "m" is null, then it uses the get() function to create a copy of the matrix in the function environment
m <- solve(data, ...) ## then it uses the solve() function to get the inverse of the matrix, and sets "m" to that value
x$setinverse(m) ## then uses setinverse() to cache that calculated inverse for later use
m ## and finally, returns the newly calculated inverse
}
cacheSolve(test_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function caches the value of a passed matrix-like object (created using makeCacheMatrix), and returns it.
## In future calls, it announces that it's saving the cached value of the inverse, rather than recalculating it.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(test_matrix)
## Put comments here that give an overall description of what your
## functions do
## This function is essentially a constructor function to create a matrix-like object, complete with functions
## which can be used to set and retrieve the matrix itself, as well as its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}  ## creates set() function for the matrix object, which allows for (re)setting the value of the matrix
get <- function() x  ## creates get() function for the matrix object, which returns the matrix
setinverse <- function(solve) m <<- solve  ## creates setinverse() function for the matrix object, which creates a
## cached value of the inverse of the matrix object
getinverse <- function() m  ## creates setinverse() function for the matrix object, which returns the
## cached value of the inverse of the matrix object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function caches the value of a passed matrix-like object (created using makeCacheMatrix), and returns it.
## In future calls, it announces that it's saving the cached value of the inverse, rather than recalculating it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()  ## sets the value of "m" to the cached inverse of the matrix-like object passed
if(!is.null(m)) {  ## if that inverse value has not already been cached, this results in "m" being null
message("getting cached data")  # if m is not null, then it announces that it's returning the cached version
return(m)  ## and then returns it
}
data <- x$get()  ## if "m" is null, then it uses the get() function to create a copy of the matrix in the function environment
m <- solve(data, ...) ## then it uses the solve() function to get the inverse of the matrix, and sets "m" to that value
x$setinverse(m) ## then uses setinverse() to cache that calculated inverse for later use
m ## and finally, returns the newly calculated inverse
}
test_matrix <- makeCacheMatrix(my_matrix)
test_matrix$get()
cacheSolve(test_matrix)
set.seed(1)
rpois(5,2)
?dpois
jtleek_data <- GET(url = "https://api.github.com/users/jtleek/repos", client_id = "81dfd18d7c501af25815",  redirect_uri = "https://github.com/scottspencer", scope = "", state = rnorm(1))
library(httr)
library(jsonlite)
jtleek_data <- GET(url = "https://api.github.com/users/jtleek/repos", client_id = "81dfd18d7c501af25815",  redirect_uri = "https://github.com/scottspencer", scope = "", state = rnorm(1))
names(jtleek_data)
toJSON(jtleek_data$content)
github <- oauth_endpoints("https://github.com/login/oauth/authorize")
my app <- oauth_app("github",key="81dfd18d7c501af25815",secret = "63643772cd53e317a90da2f8a2d6641274b0afb5")
github_token <- oauth2.0_token(github, my app)
github <- oauth_endpoints("https://github.com/login/oauth/authorize")
github <- oauth_endpoints("https://github.com/login/oauth/access_token")
github <- oauth_endpoints("github")
my_app <- oauth_app("github",key="81dfd18d7c501af25815",secret = "63643772cd53e317a90da2f8a2d6641274b0afb5")
github_token <- oauth2.0_token(github, my_app)
library(httpuv)
q
exit
?exit
?quit
q
q
quit
?q
q("yes")
library("httr", lib.loc="/home/scott/R/x86_64-pc-linux-gnu-library/3.1")
library("httpuv", lib.loc="/home/scott/R/x86_64-pc-linux-gnu-library/3.1")
library("jsonlite", lib.loc="/home/scott/R/x86_64-pc-linux-gnu-library/3.1")
github <- oauth_endpoints("github")
my_app <- oauth_app("github",key="81dfd18d7c501af25815",secret = "63643772cd53e317a90da2f8a2d6641274b0afb5")
github_token <- oauth2.0_token(github, my_app)
?oauth2.0_token
?oauth_app
?oauth2.0_token
my_app <- oauth_app("github",key="81dfd18d7c501af25815", secret = "63643772cd53e317a90da2f8a2d6641274b0afb5", redirect_uri = "https://api.github.com/users/jtleek/")
github_token <- oauth2.0_token(github, my_app)
github_token <- oauth2.0_token(github, my_app)
github_token <- oauth2.0_token(github <- oauth_endpoints("github"), my_app)
?GET
jtleek_data <- GET(url = "https://api.github.com/users/jtleek/repos", client_id = "81dfd18d7c501af25815",  redirect_uri = "https://github.com/scottspencer", scope = "", state = rnorm(1))
?oauth_endpoints
?oauth_endpoint
github2 <- oauth_endpoint(NULL, "authorize", "access_token",
base_url = "https://github.com/login/oauth")
github_token <- oauth2.0_token(github2, my_app)
gh <- oauth_endpoints("github")
library(httpuv)
gh <- oauth_endpoints("github")
library(httr)
gh <- oauth_endpoints("github")
my_app <- oauth_app("github",key="81dfd18d7c501af25815", secret = "63643772cd53e317a90da2f8a2d6641274b0afb5")
github_token <- oauth2.0_token(gh, my_app)
?xyplot
library(nlme)
library(lattice)
?xyplot
xyplot(weight ~ Time | Diet, BodyWeight)
g <- xyplot(weight ~ Time | Diet, BodyWeight)
summary(g)
g <- xyplot(weight ~ Time | Diet, BodyWeight)
print(g)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(movies)
data(movies)
qplot(votes, ratings, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
?file.exists
install.packages("knitr")
library("knitr", lib.loc="/home/scott/R/x86_64-pc-linux-gnu-library/3.1")
setwd("~/R/Reproducible Research/Project1")
activity_data <- read.csv("activity.csv")
head(activity_data)
?melt
total_steps_per_day <- aggregate(activity_data, by="date", FUN="sum", na.rm=TRUE)
total_steps_per_day <- aggregate(activity_data, by=c("date"), FUN="sum", na.rm=TRUE)
total_steps_per_day <- aggregate(activity_data, by=as.list("date"), FUN="sum", na.rm=TRUE)
total_steps_per_day <- aggregate(activity_data, by=list("date"), FUN="sum", na.rm=TRUE)
total_steps_per_day <- aggregate(activity_data, by=list("date","steps"), FUN="sum", na.rm=TRUE)
total_steps_per_day <- aggregate(activity_data, by=list("date","steps"), FUN=sum, na.rm=TRUE)
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
?hist
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
hist(total_steps_per_day)
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=activity_data, geom="histogram")
rm(total_steps_per_day)
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=activity_data, geom="histogram")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
?mean
?median
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
mean_steps_per_day <- mean(total_steps_per_day, na.rm=TRUE)
median_steps_per_day <- median(total_steps_per_day, na.rm=TRUE)
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
mean_steps_per_day <- mean(total_steps_per_day$steps, na.rm=TRUE)
median_steps_per_day <- median(total_steps_per_day$steps, na.rm=TRUE)
?options
?qplot
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="line")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=mean_steps_per_interval, geom="line")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
head(mean_steps_per_interval)
mean_steps_per_interval[interval==1030,]
mean_steps_per_interval["interval"==1030,]
mean_steps_per_interval
source('~/.active-rstudio-document', echo=TRUE)
activity_data <- read.csv("activity.csv")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=mean_steps_per_interval, geom="line")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=mean_steps_per_interval, geom="auto")
?plot
?hist
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
hist(total_steps_per_day$steps)
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
#qplot(steps, data=total_steps_per_day, geom="histogram")
hist(total_steps_per_day$steps, breaks=10, main="Histogram of Total Steps per Day")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
qplot(steps, data=total_steps_per_day, geom="histogram")
#hist(total_steps_per_day$steps, breaks=10, main="Histogram of Total Steps per Day")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
#qplot(steps, data=total_steps_per_day, geom="histogram")
hist(total_steps_per_day$steps, breaks=10, main="Histogram of Total Steps per Day")
total_steps_per_day <- aggregate(steps ~ date, data=activity_data, FUN=sum, na.rm=TRUE)
library(ggplot2)
#qplot(steps, data=total_steps_per_day, geom="histogram")
hist(total_steps_per_day$steps, breaks=20, main="Histogram of Total Steps per Day")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
plot(x=mean_steps_per_interval$interval,
y=mean_steps_per_interval$steps,
xlab="Interval",
ylab="Average Steps",
main="Average Steps per Interval")
mean_steps_per_interval <- aggregate(steps ~ interval, data=activity_data, FUN=mean, na.rm=TRUE)
plot(x=mean_steps_per_interval$interval,
y=mean_steps_per_interval$steps,
xlab="Interval",
ylab="Average Steps",
main="Average Steps per Interval",
type="l")
mean_steps_per_interval[mean_steps_per_interval["interval"==top_average], interval]
mean_steps_per_interval[mean_steps_per_interval["interval"==top_average], "interval"]
top_average <- max(mean_steps_per_interval$steps)
mean_steps_per_interval[mean_steps_per_interval["interval"==top_average], "interval"]
mean_steps_per_interval[mean_steps_per_interval["interval"==top_average, ], "interval"]
mean_steps_per_interval[mean_steps_per_interval["interval"]==top_average, ], "interval"]
mean_steps_per_interval[mean_steps_per_interval["interval"]==top_average], "interval"]
mean_steps_per_interval[mean_steps_per_interval["interval"]==top_average, "interval"]
mean_steps_per_interval[mean_steps_per_interval["steps"]==top_average, "interval"]
mean_steps_per_interval[mean_steps_per_interval["steps"]==max(mean_steps_per_interval$steps, "interval"]
mean_steps_per_interval[mean_steps_per_interval["steps"]==max(mean_steps_per_interval$steps), "interval"]
source('~/.active-rstudio-document', echo=TRUE)
na_rows <- is.na(activity_data)
nrows(na_rows==TRUE)
head(na_rows)
na_rows <- is.na(activity_data$steps)
nrows(na_rows==TRUE)
nrows(activity_data[is.na(activity_data)==TRUE, ])
nrow(activity_data[is.na(activity_data)==TRUE, ])
rm(na_rows)
?seq_along
?for
imputed_activity_data <- activity_data
imputed_activity_data$steps[is.na(imputed_activity_data$steps)==TRUE]
mean_steps_per_interval$steps[mean_steps_per_interval$interval==imputed_activity_data$interval]
imputed_activity_data$steps[is.na(imputed_activity_data$steps)==TRUE] <-mean_steps_per_interval$steps[mean_steps_per_interval$interval==imputed_activity_data$interval]
imputed_activity_data <- activity_data
for(i in seq(1:nrow(imputed_activity_data))) {
if(is.na(imputed_activity_data[i, steps])==TRUE) {
imputed_activity_data[i, steps] <- mean_steps_per_interval[mean_steps_per_interval$interval==imputed_activity_data[i, interval], steps]
}
}
for(i in seq(1:nrow(imputed_activity_data))) {
if(is.na(imputed_activity_data[i, "steps"])==TRUE) {
imputed_activity_data[i, "steps"] <- mean_steps_per_interval[mean_steps_per_interval$interval==imputed_activity_data[i, "interval"], "steps"]
}
}
head(imputed_activity_data, 100)
head(imputed_activity_data)
head(mean_steps_per_interval)
imputed_activity_data[296, ]
imputed_activity_data[2035, ]
head(mean_steps_per_interval, 100)
num_rows_still_missing_data <- nrow(imputed_activity_data[is.na(activity_data)==TRUE, ])
num_rows_still_missing_data <- nrow(imputed_activity_data[is.na(imputed_activity_data)==TRUE, ])
source('~/.active-rstudio-document', echo=TRUE)
write.csv(imputed_activity_data, "imputed_activity_data")
wd()
setwd("~/git/RepData_PeerAssessment1")
write.csv(imputed_activity_data, "imputed_activity_data")
write.csv(mean_steps_per_day, "mean_steps_per_day")
write.csv(imputed_mean_steps_per_day, "imputed_mean_steps_per_day")
write.csv(total_steps_per_day, "total_steps_per_day")
write.csv(imputed_total_steps_per_day, "imputed_total_steps_per_day")
?weekdays
weekdays(now())
Sys.date()
Sys.Date()
weekdays(Sys.Date())
?%in%
?"%in%"
imputed_activity_data$weekpart[weekdays(imputed_activity_data$date) %in% c("Saturday","Sunday")]
?as.Date
imputed_activity_data$date <- as.Date(imputed_activity_data$date)
imputed_activity_data$weekpart[weekdays(imputed_activity_data$date) %in% c("Saturday","Sunday")]
imputed_activity_data$weekpart[weekdays(imputed_activity_data$date) %in% c("Saturday","Sunday")] <- "Weekend"
imputed_activity_data$weekpart[!weekdays(imputed_activity_data$date) %in% c("Saturday","Sunday")] <- "Weekday"
head(imputed_activity_data, 500)
head(imputed_activity_data[imputed_activity_data$weekpart=="Weekend",])
imputed_total_steps_per_day <- aggregate(steps ~ date, data=imputed_activity_data, FUN=sum)
head(imputed_total_steps_per_day)
imputed_mean_steps_per_interval <- aggregate(steps ~ interval, data=imputed_activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(imputed_mean_steps_per_interval, aes(interval, steps)) + geom_line() + facet_grid(.~weekpart)
imputed_mean_steps_per_interval <- aggregate(steps ~ interval + weekpart, data=imputed_activity_data, FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(imputed_mean_steps_per_interval, aes(interval, steps)) + geom_line() + facet_grid(.~weekpart)
